Approach 1: Brute Force 
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        ListNode cA=headA;
        ListNode cB=headB;
        while(cA!=null){
            cB=headB;
            while(cB!=null){
                if(cA==cB) return cB;
                else {
                    cB=cB.next;
                }
            }
            cA=cA.next;
        }
        return null;
    }
}

Approach 2: Hash Table
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        HashSet<ListNode> set=new HashSet<>();
        while(headA!=null){
            set.add(headA);
            headA=headA.next;
        }
        while(headB!=null){
            if(set.contains(headB)){
                return headB;
            }
            else{
                headB=headB.next;
            }
        }
        return null;
       
    }
}

Approach 3:Two Pointers , go through two list
